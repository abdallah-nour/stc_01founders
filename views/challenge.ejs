<%- include('./layouts/nav.ejs'); %>

  <main role="main" style="padding-top: 3.5rem;margin-bottom: 100px;">

    <div class="container-lg text-center">


      <div class="row">
        <div class="col-md-6">
          <div id="instructions"
            style="padding:20px;border: 1px solid #000;border-radius: 10px;height: 100%;text-align: left;">
            <h3 style="color:#929393">Instructions</h3>
            <hr>
            <p>
              <%- challenge.task %>
            </p>
          </div>
        </div>
        <div class="col-md-6" style="display: flex;flex-direction: column;">
          <div class="row">
            <div class="col-md-12">
              <form id="codeForm">
                <div class="well" style="margin-top: 10px;padding: 20px;border: 1px solid #000;border-radius: 10px">
                  <select id="lang" class="form-select" aria-label="Default select example" style="margin-bottom: 10px;"
                    required>
                    <option value="PYTHON">Python</option>
                    <option selected value="JS">Javascript</option>
                    <option value="GO">Go</option>
                  </select>
                  <div id="container" style="width: 800px; height: 600px; border: 1px solid grey"></div>
                  <div class="d-grid gap-2 col-6 w-100 mx-auto d-flex justify-content-end">
                    <button id="submitButton" type="submit" class="btn btn-lg btn-primary mt-4">
                      Submit</button>
                  </div>
              </form>

            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-md-12">
            <div class="well">
              <div id="tests"
                style="margin-top: 10px;padding: 20px;border: 1px solid #000;border-radius: 10px;min-height: 300px;text-align: left;">
                <h3 id="test-header" class="idle">Tests</h3>
                <hr>
                <h6>Logs:</h6>
                <pre id="logs"></pre>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    </div>

  </main>

  <footer class="footer">
    <div class="container text-center">
      <a href="https://01founders.co" class="text-secondary">
        <small class="text-muted">Powered by Jas</small>
      </a>
    </div>

  </footer>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3"
    crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/js/all.min.js"></script>
  <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <script>
    var require = { paths: { vs: '../node_modules/monaco-editor/min/vs' } };
  </script>
  <script src="../node_modules/monaco-editor/min/vs/loader.js"></script>
  <script src="../node_modules/monaco-editor/min/vs/editor/editor.main.nls.js"></script>
  <script src="../node_modules/monaco-editor/min/vs/editor/editor.main.js"></script>
  <script>
    const initialCodesMap = {
      "dog-years": {
        PYTHON: `def dogYears(planet, dogAgeInSeconds):
    # write your code here
`,
        JS: `function dogYears(planet, dogAgeInSeconds) {
    /* write your code here */
}`,
        GO: `func dogYears(string planet, int64 dogAgeInSeconds)float64{
    /* write your code here */
}`,
      },
      "ispowerof2": {
        PYTHON: `def isPowerOf2(number1, number2, number3):
    array = [number1, number2, number3];
    # write your code here
`,
        JS: `function isPowerOf2(number1, number2, number3) {
    const array = [number1, number2, number3];
    /* write your code here */
}`,
        GO: `func isPowerOf2(number1 int, number2 int, number3 int)[3]bool{
    array:= []int{number1,number2,number3}
    /* write your code here */
}`,
      },

      "hello-world": {
        PYTHON: `def helloWorld():
    # write your code here
`,
        JS: `function helloWorld() {
    /* write your code here */
}`,
        GO: `func helloWorld()string{
    /* write your code here */
}`,
      },
      "sum-birds": {
        PYTHON: `def sumBirds(number1, number2, number3):
    array = [number1, number2, number3];
    # write your code here
`,
        JS: `function sumBirds(number1, number2, number3) {
    const array = [number1, number2, number3];
    /* write your code here */
}`,
        GO: `func sumBirds(number1 int, number2 int, number3 int)int{
    array:= []int{number1,number2,number3}
    /* write your code here */
}`,
      },
    }
    require.config({ paths: { vs: '../node_modules/monaco-editor/min/vs' } });
    require(['vs/editor/editor.main'], function () {
      window.editor = monaco.editor.create(document.getElementById('container'), {

        value: initialCodesMap["<%- challenge.title %>"]["JS"],
        // value: ['function x() {', '\tconsole.log("Hello world!");', '}'].join('\n'),
        language: 'javascript',
        theme: "vs-dark",
        minimap: { enabled: false },
        autoIndent: true,
        formatOnPaste: true,
        formatOnType: true,
        fontSize: "16px",
        scrollbar: {
          horizontal: "hidden",
        },

      });
    });

    var getLang = document.getElementById('lang');
    const changeLang = lang => {
      monaco.editor.setModelLanguage(window.editor.getModel(), lang === "JS" ? "javascript" : lang.toLowerCase());
      window.editor.getModel().setValue(initialCodesMap["<%- challenge.title %>"][lang]);
    }
    const changeSelected = (e) => {
      const $select = getLang;
      var getLangValue = getLang.options[getLang.selectedIndex].value;
      let code = "";
      if (getLangValue == "js") {
        code = 'console.log("Hello world!");';
        monaco.editor.getModels()[0].setValue(code);
      }
      changeLang(getLangValue);
    };
    getLang.addEventListener('change', changeSelected);
  </script>
  <script>
    const form = document.getElementById('codeForm');
    const submitButton = document.getElementById('submitButton');
    const challengeTitle = "<%- challenge.title %>";
    const fetchExecutionStatus = async ({ challengeTitle, requestId = "" }) => {
      const res = await fetch(`/execution-status/${challengeTitle}/${requestId}`);
      if (!res.ok) throw new Error(res.statusText);
      const resJson = await res.json()
      if (resJson.status === "PENDING") throw new Error("Still pending");
      return resJson;
    }
    const testTitle = document.getElementById("test-header");

    fetchExecutionStatus({ challengeTitle }).then((res) => {
      if (res.isDone) {
        testTitle.textContent = "Challenge already passed";
        testTitle.classList.add("success");
        logs.textContent = res.logs;
        submitButton.disabled = true;
      }
    }).catch(() => { });

    form.addEventListener("submit", (e) => {
      e.preventDefault();
      submitButton.textContent = "Loading...";
      submitButton.disabled = true;

      const code = window.editor.getValue();
      const lang = document.getElementById("lang");
      const logs = document.getElementById("logs");
      fetch("/execute-code", {
        method: "POST",
        body: JSON.stringify({
          code, lang: lang.value,
          challengeTitle: "<%- challenge.title %>"
        }),
        headers: { 'Content-Type': 'application/json' }
      })
        .then(res => {
          if (!res.ok) throw new Error(res.statusText);
          return res.json()
        })
        .then((res) => {
          console.log("res", res);
          submitButton.textContent = "Submit Success :)";
          return res.requestId;
        })
        .then((requestId) => {
          let count = 1;
          testTitle.textContent = "Executing Tests...";
          testTitle.classList.remove("success", "failed")
          testTitle.classList.add("pending");
          const intId = setInterval(() => {
            if (count > 10)
              clearInterval(intId);
            fetchExecutionStatus({ challengeTitle, requestId }).then((res) => {
              clearInterval(intId)
              testTitle.textContent = res.isDone ? "Tests Passed! you got <%- challenge.xp %> points" : "Tests Failed :(";
              testTitle.classList.add(res.isDone ? "success" : "failed");
              logs.textContent = res.logs || "" + "\n" + (res.stderr ?? "");
              if (res.isDone) submitButton.disabled = true;
            }).catch(e => (count++))
          }, 1500);
        })
        .catch((err) => {
          console.error(err);
          submitButton.textContent = "Submit Failed :(";
        })
        .finally(() => {
          submitButton.disabled = false;
        })
    });
  </script>
  </body>

  </html>